// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  products    Product[]

  @@map("categories")
}

model Supplier {
  id            Int       @id @default(autoincrement())
  name          String
  contactPerson String?   @map("contact_person")
  phone         String?
  email         String?
  address       String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  products      Product[]

  @@map("suppliers")
}

model Product {
  id                 Int             @id @default(autoincrement())
  name               String
  description        String?
  sku                String          @unique
  categoryId         Int?            @map("category_id")
  supplierId         Int?            @map("supplier_id")
  purchasePrice      Decimal?        @map("purchase_price") @db.Decimal(12, 2)
  sellingPrice       Decimal         @map("selling_price") @db.Decimal(12, 2)
  imageUrl           String?         @map("image_url")
  lowStockThreshold  Int?            @default(0) @map("low_stock_threshold")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  category           Category?       @relation(fields: [categoryId], references: [id])
  supplier           Supplier?       @relation(fields: [supplierId], references: [id])
  inventoryItems     InventoryItem[]
  stockMovements     StockMovement[]

  @@map("products")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  email         String          @unique
  passwordHash  String          @map("password_hash")
  role          UserRole        @default(USER)
  firstName     String?         @map("first_name")
  lastName      String?         @map("last_name")
  isActive      Boolean         @default(true) @map("is_active")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  stockMovements StockMovement[]

  @@map("users")
}

model InventoryItem {
  id              Int             @id @default(autoincrement())
  productId       Int             @map("product_id")
  quantity        Int             @default(0)
  reservedQuantity Int            @default(0) @map("reserved_quantity")
  location        String?         // 存储位置
  batchNumber     String?         @map("batch_number")
  expiryDate      DateTime?       @map("expiry_date")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  stockMovements  StockMovement[]

  @@unique([productId, batchNumber])
  @@map("inventory_items")
}

model StockMovement {
  id              Int               @id @default(autoincrement())
  productId       Int               @map("product_id")
  inventoryItemId Int?              @map("inventory_item_id")
  userId          Int               @map("user_id")
  type            StockMovementType
  quantity        Int               // 正数表示入库，负数表示出库
  reason          String?           // 移动原因
  reference       String?           // 参考单号（如采购单号、销售单号等）
  notes           String?           // 备注
  createdAt       DateTime          @default(now()) @map("created_at")
  product         Product           @relation(fields: [productId], references: [id])
  inventoryItem   InventoryItem?    @relation(fields: [inventoryItemId], references: [id])
  user            User              @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum StockMovementType {
  PURCHASE      // 采购入库
  SALE          // 销售出库
  ADJUSTMENT    // 库存调整
  TRANSFER      // 库存转移
  RETURN        // 退货
  DAMAGE        // 损坏
  EXPIRED       // 过期
  OTHER         // 其他
}

// ... define other models like Supplier, User, InventoryItem, StockMovement